datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quiz          Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_tokens")
}

enum QuizType {
  multiple_choice
  fill_in_the_blank
}

model Quiz {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  topic          String
  timeToComplete Int?
  quizType       QuizType
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions      Question[]

  @@index([userId], name: "userId")
}

model Question {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  question           String
  answer             String
  blankedAnswer      String?  // for fill in the blank questions
  options            String[] // for multiple choice questions
  isCorrect          Boolean? // for multiple choice questions
  questionType       QuizType
  userAnswer         String?
  quiz               Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId             String   @db.ObjectId
  @@index([quizId], name: "quizId")
}
